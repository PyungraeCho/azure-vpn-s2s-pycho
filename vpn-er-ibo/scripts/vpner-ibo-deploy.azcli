#Azure Variables
rg=lab-er-s2svpn-inet #Define your resource group
location=centralus #Set Region
mypip=$(curl -4 ifconfig.io -s) #Captures your local Public IP and adds it to NSG to restrict access to SSH only for your Public IP.
sharedkey=$(openssl rand -base64 24) #VPN Gateways S2S shared key is automatically generated.
username=azureuser
password=Msft123Msft123

#Define parameters for Azure Hub and Spokes:
AzurehubName=Az-Hub #Azure Hub Name
AzurehubaddressSpacePrefix=10.0.20.0/24 #Azure Hub VNET address space
AzurehubNamesubnetName=subnet1 #Azure Hub Subnet name where VM will be provisioned
Azurehubsubnet1Prefix=10.0.20.0/27 #Azure Hub Subnet address prefix
AzurehubgatewaySubnetPrefix=10.0.20.32/27 #Azure Hub Gateway Subnet address prefix
AzureFirewallPrefix=10.0.20.64/26 #Azure Firewall Prefix
AzurehubrssubnetPrefix=10.0.20.128/27 #Azure Hub Route Server subnet address prefix
AzureHubDnsInSubnetPrefix=10.0.20.160/28
AzureHubDnsOutSubnetPrefix=10.0.20.176/28
AzureHubBastionSubnet=10.0.20.192/26
Azurespoke1Name=Az-Spk1 #Azure Spoke 1 name
Azurespoke1AddressSpacePrefix=10.0.21.0/24 # Azure Spoke 1 VNET address space
Azurespoke1Subnet1Prefix=10.0.21.0/27 # Azure Spoke 1 Subnet1 address prefix
Azurespoke2Name=Az-Spk2 #Azure Spoke 1 name
Azurespoke2AddressSpacePrefix=10.0.22.0/24 # Azure Spoke 1 VNET address space
Azurespoke2Subnet1Prefix=10.0.22.0/27 # Azure Spoke 1 VNET address space

### VPN-VNET for Internet breakout
AzurevpngwName=az-vpn #Azure Spoke 1 name
AzurevpngwAddressSpacePrefix=10.0.23.0/24 
Azurevpngw2Subnet1Prefix=10.0.23.0/27 
AzurehubgatewaySubnetPrefix=10.0.23.32/27
vnetname=$AzurevpngwName-vnet 
subnetname=subnet1
nvaname=$AzurevpngwName-nva-lx

#Parsing parameters above in Json format (do not change)
JsonAzure={\"hubName\":\"$AzurehubName\",\"addressSpacePrefix\":\"$AzurehubaddressSpacePrefix\",\"subnetName\":\"$AzurehubNamesubnetName\",\"subnet1Prefix\":\"$Azurehubsubnet1Prefix\",\"AzureFirewallPrefix\":\"$AzureFirewallPrefix\",\"gatewaySubnetPrefix\":\"$AzurehubgatewaySubnetPrefix\",\"rssubnetPrefix\":\"$AzurehubrssubnetPrefix\",\"bastionSubnetPrefix\":\"$AzureHubBastionSubnet\",\"spoke1Name\":\"$Azurespoke1Name\",\"spoke1AddressSpacePrefix\":\"$Azurespoke1AddressSpacePrefix\",\"spoke1Subnet1Prefix\":\"$Azurespoke1Subnet1Prefix\",\"spoke2Name\":\"$Azurespoke2Name\",\"spoke2AddressSpacePrefix\":\"$Azurespoke2AddressSpacePrefix\",\"spoke2Subnet1Prefix\":\"$Azurespoke2Subnet1Prefix\"}

#Deploy base lab environment = Hub + VPN Gateway + VM and two Spokes with one VM on each.
echo Deploying base lab: Hub with Spoke1 and 2 and ExpressRoute Gateway...
az group create --name $rg --location $location --output none
az deployment group create --name lab-$RANDOM --resource-group $rg \
--template-uri https://raw.githubusercontent.com/dmauser/azure-vpn-s2s/main/vpn-er-ibo/template/azurehubspoke.json \
--parameters Restrict_SSH_VM_AccessByPublicIP=$mypip sharedKey=$sharedkey deployHubERGateway=true Azure=$JsonAzure VmAdminUsername=$username VmAdminPassword=$password \
--no-wait

#Check VMs deployment status
echo Check VMs deployment status...
for vm in $(az vm list -g $rg --query [].name -o tsv)
do
  prState=$(az vm show -n $vm -g $rg --query provisioningState -o tsv)
  if [[ $prState == 'Failed' ]];
  then
      echo $vm is in fail state.
      sleep 5
  else
      prState=''
      while [[ $prState != 'Succeeded' ]];
      do
          prState=$(az vm show -n $vm -g $rg --query provisioningState -o tsv)
          echo "$vm provisioningState="$prState
          sleep 5
      done
  fi
done 

echo Enable boot diagnostics for all VMs in the resource group (Serial console)
#Enable boot diagnostics for all VMs in the resource group (Serial console)
let "randomIdentifier=$RANDOM*$RANDOM" #used to create unique storage account name.
#Create Storage Account (boot diagnostics + serial console)
az storage account create -n sc$randomIdentifier -g $rg -l $location --sku Standard_LRS -o none
#Enable boot diagnostics
stguri=$(az storage account show -n sc$randomIdentifier -g $rg --query primaryEndpoints.blob -o tsv)
az vm boot-diagnostics enable --storage $stguri --ids $(az vm list -g $rg --query "[].id" -o tsv) -o none

echo Installing tools for networking connectivity validation 
### Installing tools for networking connectivity validation such as traceroute, tcptraceroute, iperf and others (check link below for more details) 
echo Installing tools for networking connectivity validation such as traceroute, tcptraceroute, iperf and others  
nettoolsuri="https://raw.githubusercontent.com/dmauser/azure-vm-net-tools/main/script/nettools.sh"
for vm in `az vm list -g $rg --query "[?storageProfile.imageReference.offer=='UbuntuServer'].name" -o tsv`
do
 az vm extension set \
 --resource-group $rg \
 --vm-name $vm \
 --name customScript \
 --publisher Microsoft.Azure.Extensions \
 --protected-settings "{\"fileUris\": [\"$nettoolsuri\"],\"commandToExecute\": \"./nettools.sh\"}" \
 --no-wait
done

echo Deploying OPNsense NVA1 on the Provider (this is to emulate ISaaS Provider side)
# Deploying OPNsense NVA1 on the Provider (this is to emulate ISaaS Provider side)
ShellScriptName=configureopnsense.sh
scenarioOption="TwoNics"
virtualMachineSize=Standard_B2s
virtualMachineName=provider-opnnva
virtualNetworkName=provider-vnet
existingvirtualNetwork=new
VNETAddress=172.16.0.0/24 
UntrustedSubnetCIDR=172.16.0.0/28
TrustedSubnetCIDR=172.16.0.16/28
existingUntrustedSubnetName=untrusted
existingTrustedSubnetName=trusted

az vm image terms accept --urn thefreebsdfoundation:freebsd-13_0:13_0-release:13.0.0 -o none
az deployment group create --name provider-nva-$RANDOM --resource-group $rg \
--template-uri "https://raw.githubusercontent.com/dmauser/opnazure/master/ARM/main.json" \
--parameters scenarioOption=$scenarioOption virtualMachineName=$virtualMachineName virtualMachineSize=$virtualMachineSize existingvirtualNetwork=$existingvirtualNetwork VNETAddress="[\"$VNETAddress\"]" virtualNetworkName=$virtualNetworkName UntrustedSubnetCIDR=$UntrustedSubnetCIDR TrustedSubnetCIDR=$TrustedSubnetCIDR existingUntrustedSubnetName=$existingUntrustedSubnetName existingTrustedSubnetName=$existingTrustedSubnetName Location=$location \
--no-wait

### Add Azure Firewall in the Azure Hub:

#Build Azure Firewall / Note this section takes few minutes to complete.
az network public-ip create --name $AzurehubName-azfw-pip --resource-group $rg --location $location --allocation-method static --sku standard --output none
az network firewall create --name $AzurehubName-azfw --resource-group $rg --location $location --output none
az network firewall ip-config create --firewall-name $AzurehubName-azfw --name FW-config --public-ip-address $AzurehubName-azfw-pip  --resource-group $rg --vnet-name $AzurehubName-vnet --output none
az network firewall update --name $AzurehubName-azfw --resource-group $rg --output none

#Create firewall rule to allow all traffic
az network firewall network-rule create --resource-group $rg \
--firewall-name $AzurehubName-azfw \
--collection-name azfw-rules \
--priority 1000 \
--action Allow \
--name Allow-All \
--protocols Any \
--source-addresses "*" \
--destination-addresses "*" \
--destination-ports "*"

#Create Log Analytics Workspace
Workspacename=$AzurehubName-Firewall-Logs 
az monitor log-analytics workspace create -g $rg --workspace-name $Workspacename --location $location --no-wait

#Enable Azure Firewall diagnostics
az monitor diagnostic-settings create -n 'toLogAnalytics' \
--resource $(az network firewall show --name $AzurehubName-azfw --resource-group $rg --query id -o tsv) \
--workspace $(az monitor log-analytics workspace show -g $rg --workspace-name $Workspacename --query id -o tsv) \
--logs '[{"category":"AzureFirewallApplicationRule","Enabled":true}, {"category":"AzureFirewallNetworkRule","Enabled":true}, {"category":"AzureFirewallDnsProxy","Enabled":true}]' \
--metrics '[{"category": "AllMetrics","enabled": true}]'

# Create VPN vnet and peering to spoke1
az network vnet create --name $AzurevpngwName-vnet -g $rg --address-prefixes 10.0.23.0/24 --location $location --subnet-name subnet1 --subnet-prefix $Azurevpngw2Subnet1Prefix --output none
az network vnet subnet create --address-prefix $AzurehubgatewaySubnetPrefix --name GatewaySubnet -g $rg --vnet-name $AzurevpngwName-vnet --output none

#Build VNET peering # 
az network vnet peering create -g $rg -n inet-to-spoke1 --vnet-name $AzurevpngwName-vnet --allow-vnet-access --allow-forwarded-traffic --remote-vnet $(az network vnet show -g $rg --name $Azurespoke1Name-vnet --query id --out tsv) -o none
az network vnet peering create -g $rg -n spoke1-to-inet --vnet- $Azurespoke1Name-vnet --allow-vnet-access --allow-forwarded-traffic --remote-vnet $(az network vnet show -g $rg -n $AzurevpngwName-vnet --query id --out tsv) -o none

# Deploy VPN Gateway
gwsize=VpnGw1
asn=65023
az network public-ip create --name $AzurevpngwName-vpngw-pip1 --resource-group $rg --sku Basic
az network vnet-gateway create --name $AzurevpngwName-vpngw --public-ip-address $AzurevpngwName-vpngw-pip1 \
--resource-group $rg \
--vnet $AzurevpngwName-vnet  \
--gateway-type Vpn \
--vpn-type RouteBased \
--sku $gwsize \
--asn $asn \
--no-wait

### DeployNVA on the VPN-VNET dedicated for Internet Breakout.
# NVA + Config script to enable NAT

az network public-ip create --name $nvaname-pip --resource-group $rg --location $location --allocation-method Dynamic -o none
az network nic create --name $nvaname-nic --resource-group $rg --subnet $subnetname --vnet $vnetname --public-ip-address $nvaname-pip --ip-forwarding true -o none
az vm create --resource-group $rg --location $location --name $nvaname --size Standard_B1s --nics $nvaname-nic  --image UbuntuLTS --admin-username $username --admin-password $password -o none
# Enable routing and NAT on Linux NVA:
scripturi="https://raw.githubusercontent.com/dmauser/AzureVM-Router/master/linuxrouter.sh"
az vm extension set --resource-group $rg --vm-name $nvaname  --name customScript --publisher Microsoft.Azure.Extensions \
--protected-settings "{\"fileUris\": [\"$scripturi\"],\"commandToExecute\": \"./linuxrouter.sh\"}" \
--no-wait

# UDRs - Spoke1 (AVD) / Spoke2 (Regular VNET)

## Spoke 1 uses Internet VNET NVA and private traffic to Azure Firewall
## Create UDR + Disable BGP Propagation
az network route-table create --name RT-Spoke1-to-NVA  --resource-group $rg --location $location --disable-bgp-route-propagation true -o none
## Default route to NVA
az network route-table route create --resource-group $rg --name Default-to-NVA --route-table-name RT-Spoke1-to-NVA   \
--address-prefix 0.0.0.0/0 \
--next-hop-type VirtualAppliance \
--next-hop-ip-address $(az network nic show --name $nvaname-nic -g $rg --query "ipConfigurations[].privateIpAddress" -o tsv)
## Private Traffic RFC1918 to AzFW
az network route-table route create --resource-group $rg --name 10Net-to-AZFW --route-table-name RT-Spoke1-to-NVA   \
--address-prefix 10.0.0.0/8 \
--next-hop-type VirtualAppliance \
--next-hop-ip-address $(az network firewall show --name $AzurehubName-azfw --resource-group $rg --query "ipConfigurations[].privateIpAddress" -o tsv)
az network route-table route create --resource-group $rg --name 172Net-to-AZFW --route-table-name RT-Spoke1-to-NVA   \
--address-prefix 172.16.0.0/12 \
--next-hop-type VirtualAppliance \
--next-hop-ip-address $(az network firewall show --name $AzurehubName-azfw --resource-group $rg --query "ipConfigurations[].privateIpAddress" -o tsv)
az network route-table route create --resource-group $rg --name 192Net-to-AZFW --route-table-name RT-Spoke1-to-NVA   \
--address-prefix 192.168.0.0/16 \
--next-hop-type VirtualAppliance \
--next-hop-ip-address $(az network firewall show --name $AzurehubName-azfw --resource-group $rg --query "ipConfigurations[].privateIpAddress" -o tsv)
## Traffic to Hub Subnet to AzFW
az network route-table route create --resource-group $rg --name Hub-to-AzFw --route-table-name RT-Spoke1-to-NVA   \
--address-prefix $AzurehubaddressSpacePrefix \
--next-hop-type VirtualAppliance \
--next-hop-ip-address $(az network firewall show --name $AzurehubName-azfw --resource-group $rg --query "ipConfigurations[].privateIpAddress" -o tsv)
## Remote Public IP exception to remote SSH 
mypip=$(curl ifconfig.io -s) #adding Public IP allow access to the VMs after enable UDR.
az network route-table route create --resource-group $rg --name Exception --route-table-name RT-Spoke1-to-NVA   \
--address-prefix $mypip/32 \
--next-hop-type Internet

## Spoke 2 uses AzureFirewall for both Internet and Private traffic 
## Create UDR + Disable BGP Propagation
az network route-table create --name RT-Spoke2-to-AzFW  --resource-group $rg --location $location --disable-bgp-route-propagation true
## Default route to AzFW
az network route-table route create --resource-group $rg --name Default-to-AzFw --route-table-name RT-Spoke2-to-AzFW   \
--address-prefix 0.0.0.0/0 \
--next-hop-type VirtualAppliance \
--next-hop-ip-address $(az network firewall show --name $AzurehubName-azfw --resource-group $rg --query "ipConfigurations[].privateIpAddress" -o tsv)
## Traffic to Hub to AzFW
az network route-table route create --resource-group $rg --name Hub-to-AzFw --route-table-name RT-Spoke2-to-AzFW   \
--address-prefix $AzurehubaddressSpacePrefix \
--next-hop-type VirtualAppliance \
--next-hop-ip-address $(az network firewall show --name $AzurehubName-azfw --resource-group $rg --query "ipConfigurations[].privateIpAddress" -o tsv)
## Remote Public IP exception to remote SSH 
mypip=$(curl ifconfig.io -s) #adding Public IP allow access to the VMs after enable UDR.
az network route-table route create --resource-group $rg --name Exception --route-table-name RT-Spoke2-to-AzFW   \
--address-prefix $mypip/32 \
--next-hop-type Internet

# Apply UDRs to Spk1 and Spk2 VNETs
az network vnet subnet update -n subnet1 -g $rg --vnet-name $Azurespoke1Name-vnet --route-table RT-Spoke1-to-NVA
az network vnet subnet update -n subnet1 -g $rg --vnet-name $Azurespoke2Name-vnet --route-table RT-Spoke2-to-AzFW

# Create VPN Connection from VPN-VNET to OPNSense
# Create Local Network Gateway with OnPrem info
onpremname=provider-opnnva
onpremasn=65172
onprembgpaddr=169.254.0.1
az network local-gateway create --gateway-ip-address $(az network public-ip show --name provider-opnnva-PublicIP --resource-group $rg -o tsv --query "ipAddress" -o tsv) \
--name $AzurevpngwName-lng-$onpremname \
--resource-group $rg \
--asn $onpremasn \
--bgp-peering-address $onprembgpaddr \
--output none

# Check provisioning status and create VPN connection
#Branches VPN Gateways provisioning status
prState=$(az network vnet-gateway show -g $rg -n $AzurevpngwName-vpngw --query provisioningState -o tsv)
if [[ $prState == 'Failed' ]];
then
    echo VPN Gateway is in fail state. Deleting and rebuilding.
    az network vnet-gateway delete -n $AzurevpngwName-vpngw -g $rg
    az network vnet-gateway create -n $AzurevpngwName-vpngw --public-ip-addresses $AzurevpngwName-vpngw-pip -g $rg --vnet $AzurevpngwName-vnet --asn $asn --gateway-type Vpn -l $location --sku VpnGw1 --vpn-gateway-generation Generation1 --no-wait 
    sleep 5
else
    prState=''
    while [[ $prState != 'Succeeded' ]];
    do
        prState=$(az network vnet-gateway show -g $rg -n $AzurevpngwName-vpngw --query provisioningState -o tsv)
        echo "$AzurevpngwName-vpngw provisioningState="$prState
        sleep 5
    done
fi
# Create VPN Gateway connection to On-Premises
az network vpn-connection create --name $AzurevpngwName-to-$onpremname \
--resource-group $rg \
--vnet-gateway1 $AzurevpngwName-vpngw \
-l $location \
--shared-key $sharedkey \
--local-gateway2 $AzurevpngwName-lng-$onpremname \
--enable-bgp \
--output none

# OPNSense Configuration Instructions
# Login/password: root/opnsense (change default password) - use OPNSense Public IP (HTTPS)
# Add os-frr plugin (System - Firmware - Plugin)
# Configure IPSec VPN (VPN: IPsec: Tunnel Settings)
# Add Phase1 - Remote gateway: (VPN Gateway Public IP) / My identifier: (Public IP of the OPNSense) / Pre-Shared Key /  Encryption algorithm: AES 256 / DH Key Group: 2 / Advanced Options: Install Policy uncheck (VERY IMPORTANT) 
echo Azure VPN Gateway Public IP: &&\
az network vnet-gateway show -n $AzurevpngwName-vpngw -g $rg  --query bgpSettings.bgpPeeringAddresses[0].tunnelIpAddresses -o tsv &&\
echo OPNsense Public IP: &&\
az network public-ip show --name provider-opnnva-PublicIP --resource-group $rg -o tsv --query "ipAddress" -o tsv &&\
echo Shared key: &&\
echo $sharedkey 
echo OPNsense ASN: &&\
echo $onpremasn &&\
echo VNET VPN Gateway ASN &&\
echo $asn
# Add Phase 2 - Mode: Route-based / Local Address: 169.254.0.1 / Remote Address: 169.254.21.1 / Encryption algorithm: AES 256
# Enable IPSec checkbox and Apply Changes
# Firewall: Rules:  / Add rule (Plus) / Save / Apply Changes
# Routing: General / Enable checked / Save
# Routing: BGP / General tab / enable checked / BGP AS Number 65101
# Routing: BGP / Neighbors tab / Add / Peer-IP 169.254.21.1 / Remote AS 65515 / Send Defaultroute
# Routing: BGP / General tab / Save
# Firewall: NAT: Outbound / Add rule (Plus) / Save / Apply Changes

